# Default values for pokt-portal.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

middleware:
  enabled: true
  image:
    repository: pocketfoundation/portal-middleware
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.0.49"

  config_json: |
      {
        "backend_url": "http://localhost:3000",
      	"chain_mappings": {
      		"eth-mainnet": "eth",
      		"eth-goerli": "eth"
      	},
      	"plugins_config": {
      		"plugins": [
      			"mev"
      		],
      		"mev": {
      			"chains": {
      				"avax": {
      					"provider": "avax-provider",
      					"sleep_duration": 1234
      				}
      			}
      		}
      	}
      }

  ### middleware  container probes ####

  livenessProbe:
    enabled: true
    # initialDelaySeconds: 30
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 6
    # successThreshold: 1
  readinessProbe:
    enabled: true
    # initialDelaySeconds: 5
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 6
    # successThreshold: 1
  startupProbe:
    enabled: true
    # initialDelaySeconds: 5
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 6
    # successThreshold: 1

  ### api container probes ####

  externalSecrets:
    # # external secret key
    key: "some/path/secret"
    decodginStrategy: "Auto"

  envs:
    BACKEND_URL: "http://localhost:3000"

image:
  repository: pocketfoundation/portal-api
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.0.36"

imagePullSecrets: []
  # - name: "regcred"
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "portal-api"

localRedis:
  image:
    repository: redis
    tag: "6.2-alpine"
  envs:
    ALLOW_EMPTY_PASSWORD: "yes"
  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
    requests:
      cpu: 1000m
      memory: 512Mi


podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  # must be 3000 for api OR 8080 for middleware
  port: 8080

### api container probes ####
probes:
  enabled: true

  livenessProbe:
    enabled: true
    # initialDelaySeconds: 30
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 6
    # successThreshold: 1
  readinessProbe:
    enabled: true
    # initialDelaySeconds: 5
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 6
    # successThreshold: 1
  startupProbe:
    enabled: true
    # initialDelaySeconds: 5
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 6
    # successThreshold: 1

### end api container probes ####

ingress:
  # must be one of api or middleware
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: "*.localhost"
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: mydomain-com-tls
      hosts:
        - mydomain.com

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  # minReplicas: 3
  # maxReplicas: 100
  # targetCPUUtilizationPercentage: 65
  # targetMemoryUtilizationPercentage: 65

nodeSelector: {}

tolerations: []

affinity: {}

externalSecrets:
  enabled: false
  # external secret key
  # key: "some/path/secret"
  # decodginStrategy: "None"
  # # secret-store config
  # secretStore: "vault"
  # vault:
  #   server: "https://vault:8200"
  #   mountPath: "k8s-mount-path"
  #   namespace: "our/namespace/"
  #   serviceAccount: "portal-api"
  #   role: "my-role"
  #   path: "path/"
  #   version: "v1"


# Environment variable listing
env:
  # non sensitive variables
  normal:
    # remote cache
    FOO: "bar"

  # sensitive variables stored in a secret
  secret:
    GATEWAY_HOST: localhost
    # Pocket-js keys
    GATEWAY_CLIENT_PRIVATE_KEY: "v3rys3cr3tk3yud0nt3venkn0w"
    GATEWAY_CLIENT_PASSPHRASE: "v3rys3cr3tp4ssphr4ze"
    BLOCKED_ADDRESSES_URL: "https://blocked-addresses.s3.us-west-2.amazonaws.com/blocked_address.json"
    # Mongodb env
    MONGO_ENDPOINT: "mongodb://pokt:P0K7m0ngod8@mongodb:27017/gateway"
    DATABASE_ENCRYPTION_KEY: "00000000000000000000000000000000"

    # remote cache
    REMOTE_REDIS_ENDPOINT: "redis-master:6379"
    REDIS_PORT: "6379"
    # local cache
    LOCAL_REDIS_ENDPOINT: "localhost:6379"
    REDIS_LOCAL_TTL_FACTOR: "1"

    # Influx DB
    INFLUX_URLS: "http://influxdb"
    INFLUX_TOKENS: "xbvafasvxgxg1262619"
    INFLUX_ORGS: "demand-infra"

    # Metrics DB
    PSQL_CONNECTION: "postgres://pokt:P0K7p05tgr3s8@postgres:5432/metrics"
    PSQL_CERTIFICATE: "https://s3.amazonaws.com/"

    # logz
    LOGZ_TOKEN: "12345"

    # pocket protocol dispatch and fallback nodes
    DISPATCH_URL: "https://node1.mainnet.pokt.network"
    POCKET_SESSION_BLOCK_FREQUENCY: "4"
    POCKET_BLOCK_TIME: "1038000"
    POCKET_RELAY_RETRIES: "0"
    DEFAULT_SYNC_ALLOWANCE: "5"
    DEFAULT_LOG_LIMIT_BLOCKS: "10000"

    # Choose your AAT plan
    # values: freemium, premium
    AAT_PLAN: "freemium"

    # Development environment
    WATCH: "true"
    NODE_ENV: "development"
    REGION: "localhost"
    ARCHIVAL_CHAINS: "0022,0028,0010,000A,000B,000C"

    # For connection to the metrics db using self-signed cert
    NODE_TLS_REJECT_UNAUTHORIZED: "0"

    LOG_TO_CLOUDWATCH: "false"
    AWS_ACCESS_KEY_ID: "AXAI"
    AWS_SECRET_ACCESS_KEY: "xYansdlapq912n"

    # Datadog logging
    LOG_TO_DATADOG: "false"
    DATADOG_API_KEY: myApiKey

## @section redis subcharts parameters
## @param redis.enabled Deploy redis subchart
redis:
  enabled: true
  fullnameOverride: "redis"
  architecture: "standalone"
  auth:
    enabled: false
  master:
    persistence:
      enabled: false
  replica:
    persistence:
      enabled: false
  sentinel:
    persistence:
      enabled: false

## @section influxdb subchart parameters
## @param influxdb.enabled Deploy influx subchart
##
influxdb2:
  enabled: true
  fullnameOverride: "influxdb"
  persistence:
    enabled: false
  adminUser:
    organization: "demand-infra"
    bucket: "default"
    user: "admin"
    retention_policy: "0s"
    password: "SuperS3cr37P@5$w0rd"
    token: "xbvafasvxgxg1262619"

## @section mongodb subchart parameters
## @param mongodb.enabled Deploy mongodb subchart
##
mongodb:
  enabled: true
  fullnameOverride: "mongodb"
  port: 27017
  auth:
    rootPassword: SuperS3cr37P@5$w0rd
    usernames:
      - pokt
    passwords:
      - P0K7m0ngod8
    databases:
      - gateway
  persistence:
    enabled: false

## @section postgres subchart parameters
## @param mongodb.enabled Deploy mongodb subchart
##
postgresql:
  enabled: true
  fullnameOverride: "postgres"
  architecture: "standalone"
  auth:
    username: "pokt"
    password: "P0K7p05tgr3s8"
    database: "metrics"
  primary:
    persistence:
      enabled: false
    initdb:
      scripts:
        00_db_init_script.sql.sql: |
          CREATE TABLE error (
            timestamp TIMESTAMPTZ NOT NULL,
            applicationpublickey TEXT NOT NULL,
            blockchain TEXT NOT NULL,
            nodepublickey TEXT,
            elapsedtime DOUBLE PRECISION NOT NULL,
            bytes NUMERIC NOT NULL,
            method TEXT,
            message TEXT,
            code TEXT
          );
          CREATE INDEX error_node_public_key_timestamp_idx ON error(nodepublickey, timestamp DESC);
          CREATE INDEX error_timestamp_application_public_key_idx ON error(timestamp DESC, applicationpublickey);
          CREATE INDEX error_timestamp_idx ON error(timestamp DESC);
