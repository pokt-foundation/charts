{{- range $ksts, $sts := $.Values.statefulset }}
{{- $volumeName := printf "%s-data" $sts.name }}

{{- $stsCMNames := list }}
{{- range $cntnr := $sts.containers }}
  {{- range $cm := $cntnr.mountConfigMaps }}
    {{- $stsCMNames = append $stsCMNames $cm.name  }}
  {{- end }}
{{- end }}

{{- $stsSecNames := list }}
{{- range $cntnr := $sts.containers }}
  {{- range $sec := $cntnr.mountSecrets }}
    {{- $stsSecNames = append $stsSecNames $sec.name  }}
  {{- end }}
{{- end }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $sts.name }}
  labels:
    {{- include "blockchain-node.labels" $ | nindent 4 }}
    {{- with $sts.labels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ template "blockchain-node.fullname" $ }}-{{ $sts.name }}
  podManagementPolicy: {{ default "Parallel" $.Values.global.podManagementPolicy }}
  updateStrategy:
    type: {{ default "RollingUpdate" $.Values.global.updateStrategy }}
    {{- if (eq "Recreate" $.Values.global.updateStrategy) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels:
      statefulsetname: {{ $sts.name }}
  replicas: {{ default 1 $sts.replicas }}
  template:
    metadata:
      name: {{ template "blockchain-node.fullname" $ }}
      labels:
        {{- include "blockchain-node.labels" $ | nindent 8 }}
        {{- with $sts.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        statefulsetname: {{ $sts.name }}
      {{- with $sts.podAnnotations }}
      annotations: {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      terminationGracePeriodSeconds: {{ default 180 $.Values.global.terminationGracePeriodSeconds }}
      {{- with $sts.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.global.securityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.global.serviceAccount.name }}
      serviceAccountName: {{ . }}
      {{- end }}

      initContainers:
      {{- if $sts.persistence.dataSnapshotURL }}
      # TODO: rename dataSnapshotURL -> something POKT specific, this container works only for POKT data
      # TODO: instead of wget use `uplink cp ...`
      # TODO: If dataSnapshotURL not given flag dataSnapshotURL must be created, to avoid case when initialy the flag not set, and then was added
      # Init container to download and extract given snapshot
      # UTILS image with downloaders and extracters installed
      - name: download-data-snapshot
        image: alpine:latest
        workingDir: {{ $sts.persistence.dataMountPath }}
        command:
          - 'sh'
          - '-c'
          - |
            set -exu
            if [[ -f {{ $sts.persistence.dataMountPath }}/data-initialized ]]; then
              echo "Data initialized. Skipping."
              echo "If you wish to re-download data, delete the file '{{ $sts.persistence.dataMountPath }}/data-initialized'"
            else
              rm -rf {{ $sts.persistence.dataMountPath }}/data
              mkdir -p {{ $sts.persistence.dataMountPath }}/data
              cd {{ $sts.persistence.dataMountPath }}/data
              wget --quiet --tries=30 --continue --output-document=- {{ $sts.persistence.dataSnapshotURL }} | tar xvzf -
              touch {{ $sts.persistence.dataMountPath }}/data-initialized
              echo "Snapshot download completed."
            fi
        volumeMounts:
          - name: {{ $volumeName }}
            mountPath: {{ $sts.persistence.dataMountPath }}
      {{- end }} #{{/* if $sts.persistence.dataSnapshotURL */}}

      {{- with $sts.initContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}

      containers:
        {{- range $kcntnr, $cntnr := $sts.containers }}
        - name: {{ $cntnr.name }}
          image: "{{ $cntnr.image.repository }}:{{ $cntnr.image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" $.Values.global.imagePullPolicy }}

          {{- with $cntnr.env }}
          env: {{- toYaml . | nindent 12}}
          {{- end }}

          {{- with $cntnr.workingDir }}
          workingDir: {{ . }}
          {{- end }}
          {{- with $cntnr.command }}
          command:
            - /bin/sh
            - -c
            - {{ . }}
          {{- end }}

          {{- with $cntnr.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}

          ports:
          {{- range $kprt, $prt := $cntnr.ports }}
            - name:  {{ $prt.name}}
              protocol: {{ $prt.protocol }}
              containerPort: {{ $prt.port }}
          {{- end }}

          {{- if $cntnr.healthProbes }}
          startupProbe:
            httpGet:
              path: /health/startup
              port: healthcheck
            failureThreshold: 60
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: healthcheck
            failureThreshold: 2
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: healthcheck
            failureThreshold: 1
            periodSeconds: 15
          {{- end }}

          volumeMounts:
            - name: {{ $volumeName }}
              mountPath: {{ default "/data" $sts.persistence.dataMountPath}}
            # Volume mounts from mountConfigMaps
            {{- range $cm := $cntnr.mountConfigMaps }}
            - name: {{$cm.name}}
              mountPath: {{$cm.mountPath}}
            {{- end }}
            # Volume mounts from mountSecrets
            {{- range $sec := $cntnr.mountSecrets }}
            - name: {{$sec.name}}
              mountPath: {{$sec.mountPath}}
              readOnly: true
            {{- end }}

        {{- if $cntnr.healthProbes }}
        - name: chain-healthcheck-sidecar
          image: {{ $.Values.global.chainHealthcheckSidecar.repository -}}:{{- $.Values.global.chainHealthcheckSidecar.tag }}
          imagePullPolicy: Always
          env:
            {{- range $k, $v := $cntnr.healthProbes.env }}
            - name: {{$k}}
              value: {{$v | quote}}
            {{- end }}
          ports:
            - name: healthcheck
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 9090
            initialDelaySeconds: 15
            failureThreshold: 2
            periodSeconds: 10
          resources:
            requests:
              cpu: 50m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 256Mi
        {{- end }}

        {{- end }} # {{/* range $kcntnr, $cntnr := $sts.containers */}}

      volumes:
        {{- range $cmn := $stsCMNames }}
        - name: {{$cmn}}
          configMap:
            name: {{$cmn}}
        {{- end }}
        {{- range $secn := $stsSecNames }}
        - name: {{$secn}}
          secret:
            secretName: {{$secn}}
            optional: false
        {{- end }}

  volumeClaimTemplates:
    - metadata:
        name: {{ $volumeName }}
      spec:
        {{- if $sts.persistence.storageClassName }}
        storageClassName: {{ $sts.persistence.storageClassName }}
        {{- end }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ $sts.persistence.size | quote }}

{{ end }} # {{/* range $ksts, $sts := $.Values.statefulset */}}