{{- range $ksts, $sts := $.Values.statefulset }}
{{- $volumeName := printf "%s-data" $sts.name }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $sts.name }}
  labels:
    {{- include "blockchain-node.labels" $ | nindent 4 }}
    {{- with $sts.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ template "blockchain-node.fullname" $ }}-{{ $sts.name }}
  podManagementPolicy: {{ default "Parallel" $.Values.global.podManagementPolicy }}
  updateStrategy:
    type: {{ default "RollingUpdate" $.Values.global.updateStrategy }}
    {{- if (eq "Recreate" $.Values.global.updateStrategy) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels:
      statefulsetname: {{ $sts.name }}
  replicas: {{ default 1 $sts.replicas }}
  template:
    metadata:
      name: {{ template "blockchain-node.fullname" $ }}
      labels:
        {{- include "blockchain-node.labels" $ | nindent 8 }}
        {{- with $sts.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        statefulsetname: {{ $sts.name }}
      {{- with $sts.podAnnotations }}
      annotations: {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      terminationGracePeriodSeconds: {{ default 180 $.Values.global.terminationGracePeriodSeconds }}
      {{- with $sts.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.global.securityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.global.serviceAccount.name }}
      serviceAccountName: {{ . }}
      {{- end }}


      initContainers:
      {{- if $sts.persistence.dataSnapshotURL }}
      # Init container to download and extract given snapshot
      # UTILS image with downloaders and extracters installed                                 
      - name: download-data-snapshot
        image: alpine:latest
        workingDir: {{ $sts.persistence.dataMountPath }}
        command:
          - 'sh'
          - '-c'
          - |
            set -exu
            if [[ -f {{ $sts.persistence.dataMountPath }}/init-completed ]]; then
              echo "Account already initialized. Skipping."
              echo "If you wish to run the init again, delete the file '{{ $sts.persistence.dataMountPath }}/init-completed'"
            else
              echo "Downloading snapshot."
              rm -rf {{ $sts.persistence.dataMountPath }}/data
              mkdir -p {{ $sts.persistence.dataMountPath }}/data
              cd {{ $sts.persistence.dataMountPath }}/data
              # TODO: To make it more general need to define extract command based on the extension            
              wget --quiet --tries=30 --continue --output-document=- {{ $sts.persistence.dataSnapshotURL }} | tar xvzf -
              echo "Snapshot download completed."
            fi

        volumeMounts:
          - name: {{ $volumeName }}
            mountPath: {{ $sts.persistence.dataMountPath }}
        # securityContext:
        #   runAsUser: 0
        # resources:
        #   requests:
        #     cpu: 1
        #     memory: 2Gi
        #   limits:
        #     cpu: 2
        #     memory: 2Gi

      {{- end }} #{{/* if $sts.persistence.dataSnapshotURL */}}
      {{- with $sts.initContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}

      containers:
        {{- range $kcntnr, $cntnr := $sts.containers }}
        - name: {{ $cntnr.name }}
          image: "{{ $cntnr.image.repository }}:{{ $cntnr.image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" $.Values.global.imagePullPolicy }}

          {{- with $cntnr.env }}
          env: {{- toYaml . | nindent 12}}
          {{- end }}

          {{- with $cntnr.workingDir }}
          workingDir: {{ . }}
          {{- end }}
          {{- with $cntnr.command }}
          command:
            - /bin/sh
            - -c
            - {{ . }}
          {{- end }}

          {{- with $cntnr.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}

          ports:
          {{- range $kprt, $prt := $cntnr.ports }}
            - name:  {{ $prt.name}}
              protocol: {{ $prt.protocol }}
              containerPort: {{ $prt.port }}
          {{- end }}

          {{- if $sts.healthProbes }}
          startupProbe:
            httpGet:
              path: /health/startup
              port: healthcheck
            failureThreshold: 60
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: healthcheck
            failureThreshold: 2
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: healthcheck
            failureThreshold: 1
            periodSeconds: 10
          {{- end }}

          volumeMounts:
            - name: {{ $volumeName }}
              mountPath: {{ default "/data" $sts.persistence.dataMountPath}}

        {{- end }} # {{/* range $kcntnr, $cntnr := $sts.containers */}}

        {{- if $sts.healthProbes }}
        - name: chain-healthcheck-sidecar
          image: {{ $.Values.global.chainHealthcheckSidecar.repository -}}:{{- $.Values.global.chainHealthcheckSidecar.tag }}
          imagePullPolicy: Always
          # env:
          #   {{- tpl (toYaml .Values.healthcheck_env) . | nindent 12 }}
          ports:
            - name: healthcheck
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/liveness               
              port: healthcheck
            failureThreshold: 2
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health/readiness             
              port: healthcheck
            failureThreshold: 1
            periodSeconds: 10
          # resources: TODO                         
        {{- end }}


      volumes:

  volumeClaimTemplates:
    - metadata:
        name: {{ $volumeName }}
      spec:
        {{- if $sts.persistence.storageClassName }}
        storageClassName: {{ $sts.persistence.storageClassName }}
        {{- end }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ $sts.persistence.size | quote }}

{{ end }} #--- {{/* range $ksts, $sts := $.Values.statefulset */}}