{{- range $ksts, $sts := $.Values.statefulset }}
{{- $volumeName := printf "%s-data" $sts.name }}

{{- $stsCMNames := list }}
{{- range $cntnr := $sts.containers }}
  {{- range $cm := $cntnr.mountConfigMaps }}
    {{- $stsCMNames = append $stsCMNames $cm.name  }}
  {{- end }}
{{- end }}

{{- $stsSecNames := list }}
{{- range $cntnr := $sts.containers }}
  {{- range $sec := $cntnr.mountSecrets }}
    {{- $stsSecNames = append $stsSecNames $sec.name  }}
  {{- end }}
{{- end }}
# Input validation
{{- if and $sts.persistence.pocketDataSnapshotURL $sts.persistence.awsSnapshotID }}
{{- fail "ERROR: persistence.pocketDataSnapshotURL and persistence.awsSnapshotID Cannot be given simultaneously." }}
{{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $sts.name }}
  labels:
    {{- include "blockchain-node.labels" $ | nindent 4 }}
    {{- with $sts.labels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ template "blockchain-node.fullname" $ }}-{{ $sts.name }}
  podManagementPolicy: {{ default "Parallel" $.Values.global.podManagementPolicy }}
  updateStrategy:
    type: {{ default "RollingUpdate" $.Values.global.updateStrategy }}
    {{- if (eq "Recreate" (default "RollingUpdate" $.Values.global.updateStrategy)) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels:
      statefulsetname: {{ $sts.name }}
  replicas: {{ default 1 $sts.replicas }}
  template:
    metadata:
      name: {{ template "blockchain-node.fullname" $ }}
      labels:
        {{- include "blockchain-node.labels" $ | nindent 8 }}
        {{- with $sts.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        statefulsetname: {{ $sts.name }}
      {{- with $sts.podAnnotations }}
      annotations: {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      terminationGracePeriodSeconds: {{ default 180 $.Values.global.terminationGracePeriodSeconds }}
      {{- with $sts.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.global.securityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.global.serviceAccount.name }}
      serviceAccountName: {{ . }}
      {{- end }}

      initContainers:
      {{- if $sts.persistence.awsSnapshotID }}
      - name: init-ebs-disk
        image: alpine:latest
        command:
          - 'sh'
          - '-c'
          - |
            set -exu

            echo "Warming up data from EBS snapshot"
            START_TIME="$(date +%s)"
            DISK=$(mount | grep "{{ $sts.persistence.volumeMountPath }}"| cut -d" " -f1 | cut -d"/" -f3)

            seq 0 $(($(cat /sys/block/$DISK/size) / (1 << 10))) | \
              xargs -n1 -P$(nproc --all) -I {} dd if=/hostdev/$DISK of=/dev/null skip={}k count=1 bs=512 > /dev/null 2>&1
            echo "Warmup took: $(($(date +%s)-${START_TIME})) sec."

        securityContext:
          privileged: true
          runAsUser: 0
        volumeMounts:
          - mountPath: /hostdev
            name: host-dev
          - name: {{ $volumeName }}
            mountPath: {{ $sts.persistence.volumeMountPath }}
      {{- end }}

      {{- if $sts.persistence.pocketDataSnapshotURL }}
      # TODO: If dataSnapshotURL not given flag dataSnapshotURL must be created, to avoid case when initialy the flag not set, and then was added
      # Init container to download and extract given snapshot
      - name: download-data-snapshot
        image: storjlabs/uplink:latest
        env:
          - name: UPLINK_ACCESS_TOKEN
            value: {{ $.Values.global.uplinkAccessToken | quote}}
          - name: FLAG
            value: "{{ $sts.persistence.volumeMountPath }}/snapshot-extracted"
          - name: DATA_DIR
            value: "{{ $sts.persistence.volumeMountPath }}/data"
          - name: UPLINK
            value: "/app/uplink"
        workingDir: {{ $sts.persistence.volumeMountPath }}
        command:
          - 'sh'
          - '-c'
          - |
            set -exu
            if [[ -f $FLAG ]]; then
              echo "Data already extracted. Skipping."
              echo "If you wish to re-download data, delete the file '$FLAG'"
            else
              rm -rf $DATA_DIR
              mkdir -p $DATA_DIR
              cd $DATA_DIR
              SJ_FILENAME="$(wget --server-response --spider {{  $sts.persistence.pocketDataSnapshotURL }} 2>&1 | grep -iroh -m1 'location:[[:space:]]\+https\?://[a-zA-Z0-9~#%&_+=,.?/-]\+' | cut -d" " -f2 | rev | cut -d'/' -f1|rev|cut -d'?' -f1)"
              $UPLINK cp --access="$UPLINK_ACCESS_TOKEN" sj://pocket-public-blockchains/$SJ_FILENAME - | tar xvzf -
              echo "Snapshot download completed."
              echo "$SJ_FILENAME" > $FLAG
            fi

        volumeMounts:
          - name: {{ $volumeName }}
            mountPath: {{ $sts.persistence.volumeMountPath }}
      {{- end }} #{{/* if $sts.persistence.dataSnapshotURL */}}

      {{- range $kcntnr, $cntnr := $sts.containers }}
      {{- if or $cntnr.mountConfigMaps $cntnr.mountSecrets }}
      {{ $cmPref := "/cm" }}
      {{ $secPref := "/sec" }}
      - name: cp-configs
        image: alpine:latest
        workingDir: {{ $sts.persistence.volumeMountPath }}
        command:
          - 'sh'
          - '-c'
          - |
            set -exu
          {{- range $cm := (concat (default (list ) $cntnr.mountConfigMaps) (default (list ) $cntnr.mountSecrets)) }}
            mkdir -p {{$cm.targetPath}}
            cp -f /{{$cm.name}}/* {{$cm.targetPath}}
          {{- end }}
        volumeMounts:
          - name: {{ $volumeName }}
            mountPath: {{ $sts.persistence.volumeMountPath }}

          # Volume mounts from mountConfigMaps
          {{- range $cm := $cntnr.mountConfigMaps }}
          - name: {{$cm.name}}
            mountPath: /{{ $cm.name }}
          {{- end }}

          # Volume mounts from mountSecrets
          {{- range $sec := $cntnr.mountSecrets }}
          - name: {{$sec.name}}
            mountPath: /{{ $sec.name }}
            readOnly: true
          {{- end }}


      {{- end }}
      {{- end }} #{{/* range $kcntnr, $cntnr := $sts.containers */}}

      {{- with $sts.initContainers }}
        {{- toYaml . | nindent 6 }}
      {{- end }}

      containers:
      {{- range $kcntnr, $cntnr := $sts.containers }}
        {{- if $cntnr.healthProbes }}
        - name: chain-healthcheck-sidecar
          image: {{ $.Values.global.chainHealthcheckSidecar.repository -}}:{{- $.Values.global.chainHealthcheckSidecar.tag }}
          imagePullPolicy: Always
          env:
            {{- range $k, $v := $cntnr.healthProbes.env }}
            - name: {{$k}}
              value: {{$v | quote}}
            {{- end }}
          ports:
            - name: healthcheck
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 9090
            initialDelaySeconds: 15
            failureThreshold: 2
            periodSeconds: 10
          resources:
            requests:
              cpu: 50m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 256Mi
        {{- end }}

        - name: {{ $cntnr.name }}
          image: "{{ $cntnr.image.repository }}:{{ $cntnr.image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" $.Values.global.imagePullPolicy }}

          {{- with $cntnr.env }}
          env: {{- toYaml . | nindent 12}}
          {{- end }}

          {{- with $cntnr.workingDir }}
          workingDir: {{ . }}
          {{- end }}
          {{- with $cntnr.command }}
          command:
            - /bin/sh
            - -c
            - {{ . }}
          {{- end }}

          {{- with $cntnr.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}

          ports:
          {{- range $kprt, $prt := $cntnr.ports }}
            - name:  {{ $prt.name}}
              protocol: {{ $prt.protocol }}
              containerPort: {{ $prt.port }}
          {{- end }}

          {{- if $cntnr.healthProbes }}
          startupProbe:
            httpGet:
              path: /health/startup
              port: 9090
            failureThreshold: 60
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 9090
            failureThreshold: 2
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 9090
            failureThreshold: 1
            periodSeconds: 15
          {{- end }}

          volumeMounts:
            - name: {{ $volumeName }}
              mountPath: {{ $sts.persistence.volumeMountPath }}

      {{- end }} # {{/* range $kcntnr, $cntnr := $sts.containers */}}

      volumes:
        {{- range $cmn := $stsCMNames }}
        - name: {{$cmn}}
          configMap:
            name: {{$cmn}}
        {{- end }}

        {{- range $secn := $stsSecNames }}
        - name: {{$secn}}
          secret:
            secretName: {{$secn}}
            optional: false
        {{- end }}

        {{- if $sts.persistence.awsSnapshotID }}
        - name: host-dev
          hostPath:
            path: /dev
        {{ end }}
  volumeClaimTemplates:
    - metadata:
        name: {{ $volumeName }}
      spec:
        {{- if $sts.persistence.storageClassName }}
        storageClassName: {{ $sts.persistence.storageClassName }}
        {{- end }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ $sts.persistence.size | quote }}
        {{- if $sts.persistence.awsSnapshotID }}
        dataSource:
          name: {{ $sts.persistence.awsSnapshotID | quote }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}

{{ end }} # {{/* range $ksts, $sts := $.Values.statefulset */}}
